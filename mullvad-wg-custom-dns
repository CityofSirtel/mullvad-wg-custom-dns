#!/bin/bash

usage() {
cat << EOF
mullvad-wg-custom-dns -s [server name] -a [account number] -d [dns ip] -o [output file]
mullvad-wg-custom-dns -R [old config] -a [account number]
EOF
}

while getopts hs:a:d:o:R: option
do
    case "${option}"
        in
        s)server=${OPTARG};;
        a)acct_num=${OPTARG};;
        d)dns=${OPTARG};;
        o)file=${OPTARG};;
        R)config=${OPTARG};;
        h)
            usage
            exit 0
        ;;
        *)
            usage
            exit 1
        ;;
    esac
done

if [ -z "$acct_num" ]; then
    usage
    echo "Must provide Mullvad Account number"
    exit 1
elif [ -f "$acct_num" ]; then
    # Creds in file
    acct_num=$(cat "$acct_num")
fi

server_data() {
    data=$(curl https://api.mullvad.net/www/relays/wireguard/ 2>/dev/null \
            | sed 's/},{/}\n{/g' | grep $1
          )
    # Check response
    if [ -z "$data" ] || [ $(wc -l <<< "$data") -gt 1 ]; then
        echo "Please provide a valid Mullvad Wireguard server hostname"
        exit 1
    elif grep -q 'active":false' <<< "$data"; then
        echo "Selected server is not currently active"
        exit 1
    fi
    echo "$data"
}

# Get server data from api or old config
if [ -z "$config" ]; then
    # Get server from arg
    if [ -z "$server" ]; then
        usage
        echo "Must provide server name from https://mullvad.net/en/servers/ "
        exit 1
    fi

    data=$(server_data $server)
    server_ip=$(echo "$data" | sed 's/.*"ipv4_addr_in":"\(.*\)","ipv6.*/\1/g')
    server_pubkey=$(echo "$data" | sed 's/.*"pubkey":"\(.*\)","multihop.*/\1/g')

elif [ -f "$config" ]; then
    if ! [ -z "$server" ]; then
        # Replace with new server data
        data=$(server_data $server)
        server_ip=$(echo "$data" | sed 's/.*"ipv4_addr_in":"\(.*\)","ipv6.*/\1/g')
        server_pubkey=$(echo "$data" | sed 's/.*"pubkey":"\(.*\)","multihop.*/\1/g')
    else
        # Parse old config
        server_ip=$(grep Endpoint $config | sed 's/.*=\s\(.*\):.*/\1/')
        server_pubkey=$(grep PublicKey $config | cut -d ' ' -f 3)
    fi

    old_dns=$(grep DNS $config | sed 's/DNS\s=\s\(.*\)/\1/')
    if [ -z "$dns" ]; then
        dns="$old_dns"
    fi
    old_pubkey=$(grep PrivateKey $config | cut -d ' ' -f 3 | wg pubkey)
else 
    echo "File not found"
    exit 1
fi

# Gen key, same either way
priv_key=$(wg genkey)
pub_key=$(echo $priv_key | wg pubkey)

if [ -z "$config" ]; then
    # If not replacing, register new key
    response=$(curl -sSL https://api.mullvad.net/app/v1/wireguard-keys \
                -H "Content-Type: application/json" \
                -H "Authorization: Token $acct_num" \
                -d '{"pubkey":"'$pub_key'"}' \
              )
else
    # If replacing, replace
    response=$(curl -sSL https://api.mullvad.net/app/v1/replace-wireguard-key \
                -H "Content-Type: application/json" \
                -H "Authorization: Token $acct_num" \
                -d '{"old":"'$old_pubkey'","new":"'$pub_key'"}'
              )
fi

# Check Response for failure
if grep -q "ipv4_address" <<< "$response"; then
    ipv4=$(echo $response | sed 's/.*ipv4_address\":\"\(.*\)\",\"ipv6.*/\1/')
    ipv6=$(echo $response | sed 's/.*ipv6_address\":\"\(.*\)\".*/\1/')
else
    echo "Failure to authenticate with Mullvad API"
    echo "$response"
    exit 1
fi

output="[Interface]
PrivateKey = $priv_key
Address = $ipv4,$ipv6
DNS = $dns

[Peer]
PublicKey = $server_pubkey
AllowedIPs = 0.0.0.0/0,::0/0
Endpoint = $server_ip:51820"

if ! [ -z "$config" ]; then
    echo "$output" > "$config"
elif ! [ -z "$file" ]; then
    echo "$output" > "$file"
else
    echo "$output"
fi
